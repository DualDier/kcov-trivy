name: CI Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: alpine:3.20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install dependencies and build kcov
        run: |
          apk add --no-cache bash bats git cmake g++ make pkgconfig \
            curl-dev elfutils-dev binutils-dev python3 zlib-dev
          
          # Build kcov from source
          cd /tmp
          git clone --depth 1 https://github.com/SimonKagstrom/kcov.git
          cd kcov
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make
          make install
          cd /
      
      - name: Run BATS tests with kcov
        run: |
          mkdir -p coverage
          kcov --exclude-pattern=/usr,/tmp coverage/ bats tests/
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
      
      - name: Coverage summary
        if: always()
        run: |
          if [ -f coverage/index.json ]; then
            echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "âœ… Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          fi
  
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t myapp:latest .
      
      - name: Save Docker image
        run: docker save myapp:latest -o myapp.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: myapp.tar
  
  scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Load Docker image
        run: docker load -i myapp.tar
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'myapp:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Trivy scanner (table format)
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'myapp:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'